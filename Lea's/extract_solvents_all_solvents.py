import pandas as pd
import os

def extract_solvents_from_smiles(file_path, smiles_column='rxn_Smiles'):
    # Chargement du fichier CSV
    df = pd.read_csv(file_path)

    # Liste des solvants communs et leurs SMILES
    known_solvents = [
        'O',
        'C1CC2(C(=O)CC1O2)O',
        'C(C(CO)O)O',
        'OCCO',
        'CC(O)CO' ,
        'OCCOCCO',
        'OCCN(CCO)CCO',
        'CS(=O)C',
        'CCO',
        'CC(C)O',
        'CCCC(=O)O',
        'CC#N',
        'OCCOCCOCCO',
        'C[N+](=O)[O-]',
        'CC(C)(C)O',
        'CCC(C)O',
        'CC1COC(=O)O1',
        'CN(C)P(=O)(N(C)C)N(C)C',
        'CC(C)CCO',
        'CC(=O)C',
        'COCCOCO',
        'COC(C)CO',
        'CCCCCO',
        'COC(C)CO',
        'CCCOCCO',
        'CC(=O)CC(C)(C)O',
        'OC1CCCCC1',
        'OCc1ccccc1',
        'CCC(C)(C)O',
        'c1ccncc1',
        'CCCC(C)O',
        'CCOCCOCCO',
        'CCC(CC)O',
        'CCC(C)CO',
        'OCCOCCOCCOCCO',
        'CC(=O)OC',
        'O=C1CCCC1',
        'CCC(=O)C',
        'CC(C)CC(C)O',
        'CCCCOCCO',
        'CN1CCOCC1',
        'COC(OC)OC',
        'CCCC(=O)C',
        'CCCCOCCOCCO',
        'CCC(=O)OC',
        'COC(C)C(=O)OC',
        'CCCOC=O',
        'CC(=O)OCC',
        'COC(=O)OC',
        'O=C1CCCCC1',
        'CCCCCCCO',
        'CCC(=O)CC',
        'CCCOC(C)CO',
        'CC(=O)OCCOC(=O)C',
        'CC(=O)OC(C)C',
        'CCCOC(C)C(=O)OC',
        'CCCOC(=O)C',
        'CCCCOC=O',
        'CC(=O)OCC(OC(=O)C)COC(=O)C',
        'CC(=O)CC(C)C',
        'CCOCC',
        'CCOCCOCCOC',
        'CC(Cl)Cl',
        'COC(C)(C)C',
        'C1CCSC1',
        'CCCCOCCO',
        'CC(=O)c1ccccc1',
        'CC(=O)OCC(C)C',
        'CC1CCOC1',
        'COCC(C)OCC(C)OCC(C)O',
        'CCCCOC(=O)C',
        'CCOC(OCC)OCC',
        'c1ccsc1',
        'CC(C)CCOC(=O)C',
        'CCCCOCCO(C=O)C',
        'CCCCCOC(=O)C',
        'CC(C)OC(C)C',
        'COC(C)(C)CC',
        'COc1ccccc1',
        'c1ccc(Cl)cc1',
        'CCCCCCOC(=O)C',
        'CCCCCOC(=O)CC',
        'c1ccc(Br)cc1',
        'CCCCOCCOCCO(C=O)C',
        'c1ccc(Cl)c(Cl)c1',
        'CC1CCCC1',
        'CCCOC(=O)CC',
        'CCc1ccccc1',
        'CC(C)CCC',
        'CCCCC',
        'C1CCCCC1',
        'Cc1ccc(C)cc1',
        'CC1CCCCC1',
        'CC(C)c1ccccc1',
        'CCC1CCCCC1',
        'FC1=C(F)C(F)=C(F)C(F)=C1C(F)(F)F',
        'Cc1cc(C)cc(C)c1',
        'CCCCc1ccccc1',
        'CC1=CCC(CC1)C(=C)C',
        'CCCCCCC',
        'CCCCCCCC',
        'C1=CC=C(C=C1)COC(=O)C2=CC=CC=C2',
        'c1ccc(Oc2ccccc2)cc1',
        'CCCCCCCCC',
        'CCCCCCCCCC',
        'C1(F)(F)C2(F)(F)C(F)(F)C(F)(F)C1(F)C1(F)C(F)(F)C(F)(F)C2(F)C1(F)F',
        'C[Si](C)(C)O[Si](C)(C)O[Si](C)(C)C',
        'C[Si](C)(C)O[Si](C)(C)O[Si](C)(C)O[Si](C)(C)C',
        'C[Si]1(C)O[Si](C)(C)O[Si](C)(C)O[Si](C)(C)O[Si](C)(C)O1',
        'CCCO',
        'O=S1CCCC1',
        'c1ccnnc1',
        'CCCCO',
        'CC(C)c1ccc(C)cc1',
        'CC(C)CO',
        'O=C1CCCCN1C',
        'c1cc[nH]c1',
        'CC1(C)OCC(CO)O1',
        'c1cncnc1',
        'CN1CCCC(=O)N(C)C1',
        'CN1C(=O)C=CC1=O',
        'CC[N+](=O)[O-]',
        'CN1CCCCCC1=O',
        'CC1CCC(=O)O1',
        'CC(O)C(=O)OCC',
        'CCCCCCOH',
        'CC(=O)CC(=O)C',
        'CCOC=O',
        'CCCC#N',
        'Nc1ccccc1',
        'CCOc1ccccc1',
        'O=S1OCCO1',
        'C1CCN=C2CCCCN2CC1',
        'COC1COC2C1OCC2OC',
        'COC(C)OC',
        'C1COCCO1',
        'COS(=O)OC',
        'CC(C)C(=O)C',
        'CC1CCC(CO)CC1',
        'CC(=O)CC(=O)OCC',
        'CC(OC)COCC(C)O',
        'CCC[N+](=O)[O-]',
        'CC1(C)OCCO1',
        'Cc1ccccn1',
        'CCCCOCCOCCOCCO',
        'C1CCOCC1',
        'CCCCC(=O)C',
        'CC1=CC(=O)CC(C)(C)C1',
        'CC(=O)C(C)(C)C',
        'c1ccccc1C#N',
        'CC(OC)COC(=O)C',
        'ClC=CCl',
        'CC1CCCCC1=O',
        'CCC(=O)OCC',
        'Cc1cccc(C)n1',
        'CCCC(=O)OC',
        'CCCCCC#N',
        'COC(C)OC',
        'CC(OC(=O)C)COC(=O)C',
        'COC(=O)CCCCC(=O)OC',
        'CCCCC(CC)CO',
        'ClCC(Cl)Cl',
        'CCCOC(C)COC(C)CO',
        'COC(OC)(OC)OC',
        'CC(COC)OC',
        'COC(C)COC(C)COC',
        'CCCCCCOCCOCCOH',
        'CCCC(=O)OCC',
        'CC(C)C(=O)OCC(C)(C)CC(C)O',
        'CCOC(=O)OCC',
        'CNc1ccccc1',
        'CC(C)C(=O)C(C)C',
        'C1CSCS1',
        'CCOCCCC(=O)OCC',
        'ClC=CCl',
        'CCCCCCCCOH',
        'CC1CCCO1',
        'Fc1ccccc1',
        'CCCCOCCOCCO',
        'CCCOCCC',
        'COC(=O)c1ccccc1',
        'CC(OC)COC(C)C(=O)OC',
        'CCNc1ccccc1',
        'ClC(Cl)C(Cl)(Cl)Cl',
        'FC(F)(F)c1ccccc1',
        'C1CCCC1',
        'CN(C)c1ccccc1',
        'Ic1ccccc1',
        'CCCCC(=O)CCCC',
        'CC(C)CC(=O)CC(C)C',
        'Cc1ccccc1',
        'CCOc1ccccc1',
        'ClC(=C(Cl)Cl)Cl',
        'CCCCOCCCC',
        'Clc1cccc(Cl)c1',
        'CCCCOCCOCCOCCO',
        'CCN(C(C)C)C(C)C',
        'c1ccc2CCCc2c1',
        'FC(F)(F)Oc1ccccc1',
        'FC1=C(F)C(F)=C(F)C(F)=C1F',
        'CCN(CC)S(=O)(=O)N(CC)CC',
        'c1ccc2c(c1)CCCC2',
        'CC1=CC=C(C=C1)C(C)C',
        'C[Si](C)(C)O[Si](C)(C)C',
        'C[Si]1(C)O[Si](C)(C)O[Si](C)(C)O[Si](C)(C)O1',
        'NC=O',
        'FC(F)(F)C(=O)O',
        'O=CO',
        'CNC=O',
        'NCCN',
        'CO',
        'NCCO',
        'CC(=O)NC',
        'CC(=O)O',
        'OC(C(F)(F)F)C(F)(F)F',
        'CCC(=O)O',
        'OCC(F)(F)F',
        '__loader__CN(C)C(=O)N(C)C',
        'CC(C)C(=O)O',
        'COCCO',
        'CN(C)C=O',
        'CC(=O)N(C)C',
        'CC(C)N',
        'O=S1(=O)CCCC1',
        'C1COCCN1',
        'O=C1CCCN(C)1',
        'CCCN',
        'CCOCCO',
        'CCCC#N',
        'C1CCNC1',
        'C1OCOCO1',
        'COC=O',
        'CC(C)CN',
        'CC(C)(C)N',
        'CCCCN',
        'O=CC1=CC=CO1',
        'N#CCCCCCC#N',
        'CCCCCN',
        'CC(=O)OC(=O)C',
        'C1CCCO1',
        'CN(C)P(=O)(N(C)C)N(C)C',
        'C1CCNCC1',
        'COCCOC',
        'NCc1ccccc1',
        'NC1CCCCC1',
        'COCCOCCOC',
        'COCCOCCOCCOC',
        'CCNCC',
        'ClCCl',
        'CC(C)[N+](=O)[O-]',
        'CCOCCOC(=O)C',
        'ClC(Cl)Cl',
        'ClCCCl',
        'O=[N+]([O-])c1ccccc1',
        'c1ccc2ncccc2c1',
        'ClC(Cl)C(Cl)Cl',
        'ICI',
        'ClC(=C)Cl',
        'c1ccoc1',
        'CCCCNCCC',
        'CC(C)NC(C)C',
        'S=C=S',
        'CCCCNCCCC',
        'CCN(CC)CC',
        'CC(Cl)(Cl)Cl',
        'ClC(Cl)=CCl',
        'c1ccccc1',
        'O=C(OC(=O)C(F)(F)F)C(F)(F)F',
        'ClC(Cl)(Cl)Cl',
        'CCCCCC',
        'C1CCC2CCCCC2C1',
        'CCCCN(CCCC)CCCC',
        

    ]
    
    # Fonction pour extraire les solvants des réactifs dans la réaction SMILES
    def get_solvents(rxn_smiles):
        # Vérifier la partie avant '>>' qui correspond aux réactifs
        reactants = rxn_smiles.split('>>')[0]
        
        solvents_found = []  # Liste pour stocker les solvants trouvés
        
        # Vérifier si un solvant connu est présent parmi les réactifs
        for solvent in known_solvents:
            if solvent in reactants:
                solvents_found.append(solvent)  # Ajouter le solvant à la liste
        
        # Retourner une chaîne de solvants séparés par des virgules, ou None si aucun solvant n'est trouvé
        return ', '.join(solvents_found) if solvents_found else None
    
    # Appliquer la fonction pour extraire les solvants
    df['solvents'] = df[smiles_column].apply(get_solvents)
    
    # Créer le chemin pour le fichier modifié avec un suffixe "_with_solvents"
    base_name, ext = os.path.splitext(file_path)
    modified_file_path = f"{base_name}_with_all_solvents{ext}"
    
    # Sauvegarder le fichier modifié avec le nouveau nom
    df.to_csv(modified_file_path, index=False)
    
    print(f"Le fichier a été modifié et sauvegardé sous : {modified_file_path}")

# Exemple d'utilisation :
file_path = "/Users/lealombard/PPChem_Project/Lea's/extract.csv"  # Remplace par le chemin réel de ton fichier
extract_solvents_from_smiles(file_path)




    

